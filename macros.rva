
macro la { rd symbol } {
    auipc rd symbol
    addi  rd rd symbol
}

proc push { args } {
    lpush ::PUSHED $args
    set i 4
    foreach arg $args {
        sw $arg sp $i
        incr i 4
    }
    addi sp sp $i
}

proc pop { args } {
    if { [llength $args] == 0 } {
        set args [lpop ::PUSHED]
    }
    set i -4
    foreach arg [lreverse $args] {
        lw $arg sp $i
        incr i -4
    }
    addi sp sp $i
}

macro jmp { tgt }   { jal zero tgt }
macro ret { rd }   { jal zero rd  }
alias ret -> ret ra
macro inc { rd }    { add rd rd  1 }
macro dec { rd }    { add rd rd -1 }
macro mv  { rd rs } { addi rd rs 0 }
macro not { rd rs } { xori rd rs -1 }
alias not rd -> not rd rd
macro neg { rd rs } { sub rd x0 rs }
alias neg rd -> neg rd rd
macro jr { r } {
    jalr x0 r 0
}

