
macro la { rd symbol } {
    auipc rd symbol
    addi  rd rd symbol
}

proc .org { org } { 
    switch [string index $org 0] {
        + {  dot [expr { [dot] + $org }] }
        - {  dot [expr { [dot] + $org }] }
        default { setlabel . $org }
    }
}

proc .global { args } {}
proc .text { args } {
    set mode rx
}
proc .data { args } {
    set mode rw
}

macro .align { n } {
    incrdot [expr { [dot] % n }]
}

macro _string { str } {
    foreach char [split str ""] {
        _db [scan $char %c]
    }
}

macro _db { args } {
    foreach byte args {
        st_byte [dot] $byte
        incrdot 1
    }
}

macro .string { str } {
    line [dot] ".string $str"
    _string str
}

macro .asciz { str } {
    line [dot] ".asciz str"
    _string str
    _db 0
}

macro .db { args } {
    line [dot] ".db args"
    _db {*}args
}

macro .dh { args } {
    line [dot] ".dh args"
    foreach word args {
        st_word [dot] $word
        incrdot 2
    }
}

macro .dw { args } {
    line [dot] ".dw args"
    foreach word args {
        st_word [dot] $word
        incrdot 4
    }
}

macro .dd { args } {
    foreach dble args {
        st_word [dot] $dble
        incrdot 8
    }
}

proc push { args } {
    lpush ::PUSHED $args
    set i 0
    foreach arg $args {
        incr i 4
        sw $arg sp $i
    }
    addi sp sp $i
}

proc pop { args } {
    if { [llength $args] == 0 } {
        set args [lpop ::PUSHED]
    }
    set i 0
    foreach arg [lreverse $args] {
        incr i -4
        lw $arg sp $i
    }
    addi sp sp $i
}

macro jmp { tgt }   { jal zero tgt }

alias callr rs1 imm  -> jalr ra rs1 imm
alias call imm  -> jalr ra x0 imm
alias jr r -> jalr x0 r 0
alias ret -> jr ra

macro inc { rd }    { addi rd rd  1 }
macro dec { rd }    { addi rd rd -1 }
macro mv  { rd rs } { addi rd rs 0 }
macro not { rd rs } { xori rd rs -1 }
alias not rd -> not rd rd
macro neg { rd rs } { sub rd x0 rs }
alias neg rd -> neg rd rd

